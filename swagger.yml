openapi: 3.0.3
info:
  title: Dionysus API
  version: 1.0.0
  description: Meme Project
  contact:
    name: shinkeonkim
    email: dev.shinkeonkim@gmail.com
paths:
  /api/v1/accounts/kakao/login/callback/:
    get:
      operationId: api_v1_accounts_kakao_login_callback_retrieve
      description: 카카오 인증 후 받은 인가 코드(code)를 이용해 액세스 토큰을 요청하고, 회원가입 또는 로그인 처리를 합니다.
      summary: Kakao OAuth Callback
      parameters:
      - in: query
        name: code
        schema:
          type: string
        description: 카카오 OAuth 인증 후 반환되는 인가 코드
        required: true
      - in: query
        name: redirect_uri
        schema:
          type: string
        description: redirect_uri
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KakaoAuthResponse'
              examples:
                성공예제:
                  value:
                    access: jwt_access_token
                    refresh: jwt_refresh_token
                  summary: 정상적으로 JWT 토큰을 반환하는 경우
                실패예제:
                  value:
                    err_msg: failed to retrieve access token
                  summary: 인가 코드가 올바르지 않은 경우
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: 잘못된 요청
                content:
                  application/json:
                    example:
                      err_msg: failed to signin
          description: ''
  /api/v1/accounts/kakao/login/finish/:
    post:
      operationId: api_v1_accounts_kakao_login_finish_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /api/v1/accounts/login/:
    post:
      operationId: api_v1_accounts_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/v1/accounts/logout/:
    post:
      operationId: api_v1_accounts_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/accounts/password/change/:
    post:
      operationId: api_v1_accounts_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/accounts/password/reset/:
    post:
      operationId: api_v1_accounts_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/accounts/password/reset/confirm/:
    post:
      operationId: api_v1_accounts_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/accounts/token/refresh/:
    post:
      operationId: api_v1_accounts_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/accounts/token/verify/:
    post:
      operationId: api_v1_accounts_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/accounts/user/:
    get:
      operationId: api_v1_accounts_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    put:
      operationId: api_v1_accounts_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetail'
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    patch:
      operationId: api_v1_accounts_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetail'
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
  /api/v1/bookmarkings/:
    post:
      operationId: bookmarking_sync
      description: 단일 밈과 여러 북마크에 대해서 동시에 다룹니다.
      summary: bulk sync bookmarkings
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                meme_id:
                  type: integer
                  description: The ID of the Meme to sync.
                bookmark_ids:
                  type: array
                  items:
                    type: integer
                  description: List of Bookmark IDs belonging to the user.
              required:
              - meme_id
              - bookmark_ids
            examples:
              Example:
                value:
                  meme_id: 10
                  bookmark_ids:
                  - 101
                  - 102
                  - 103
                summary: A valid request
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Successful synchronization.
                content:
                  application/json:
                    example:
                      detail: Bookmarkings synced successfully.
              examples:
                Example:
                  value:
                    meme_id: 10
                    bookmark_ids:
                    - 101
                    - 102
                    - 103
                  summary: A valid request
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request (e.g. missing fields).
                content:
                  application/json:
                    example:
                      detail: meme_id and bookmark_ids are required.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Meme not found or invalid resource.
                content:
                  application/json:
                    example:
                      detail: Not found.
          description: ''
  /api/v1/bookmarkings/{bookmarking_id}:
    delete:
      operationId: bookmarking_delete
      description: Removes the specified Bookmarking if it belongs to the current
        user. Returns 204 on success.
      summary: Delete a Bookmarking
      parameters:
      - in: path
        name: bookmarking_id
        schema:
          type: integer
        description: The ID of the Bookmarking to delete.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                description: Bookmarking not found, or doesn't belong to the user.
                content:
                  application/json:
                    example:
                      detail: Not found.
          description: ''
  /api/v1/bookmarks/:
    get:
      operationId: api_v1_bookmarks_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: per_page
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookmarkList'
          description: ''
    post:
      operationId: api_v1_bookmarks_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bookmark'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bookmark'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bookmark'
        required: true
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: ''
  /api/v1/bookmarks/{bookmark_pk}/bookmarkings/:
    get:
      operationId: api_v1_bookmarks_bookmarkings_list
      parameters:
      - in: path
        name: bookmark_pk
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: per_page
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookmarkingList'
          description: ''
  /api/v1/bookmarks/{bookmark_pk}/bookmarkings/{id}/:
    get:
      operationId: api_v1_bookmarks_bookmarkings_retrieve
      parameters:
      - in: path
        name: bookmark_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bookmarking.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmarking'
          description: ''
  /api/v1/bookmarks/{id}/:
    get:
      operationId: api_v1_bookmarks_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bookmark.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: ''
    put:
      operationId: api_v1_bookmarks_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bookmark.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bookmark'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bookmark'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bookmark'
        required: true
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: ''
    patch:
      operationId: api_v1_bookmarks_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bookmark.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBookmark'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBookmark'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBookmark'
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: ''
    delete:
      operationId: api_v1_bookmarks_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bookmark.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/memes/:
    get:
      operationId: api_v1_memes_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: per_page
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: tags__category__name
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          title: Meme type
          enum:
          - Audio
          - Image
          - Text
          - Video
        description: |-
          * `Text` - Text
          * `Image` - Image
          * `Video` - Video
          * `Audio` - Audio
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMemeList'
          description: ''
  /api/v1/memes/{meme_id}/related:
    get:
      operationId: api_v1_memes_related_list
      description: Retrieve a list of memes related to the given meme ID.
      parameters:
      - in: query
        name: count
        schema:
          type: integer
        description: Number of related memes to retrieve
      - in: path
        name: meme_id
        schema:
          type: integer
        description: ID of the meme for which related memes are fetched
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meme'
          description: ''
  /api/v1/memes/{id}/:
    get:
      operationId: api_v1_memes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meme.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
          description: ''
  /api/v1/tags/:
    get:
      operationId: api_v1_tags_list
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: first_letter
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: per_page
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
  /api/v1/tags/by-first-letter/:
    get:
      operationId: api_v1_tags_by_first_letter_list
      description: Retrieve tags grouped by their first letter, with a specified limit
        per letter.
      parameters:
      - in: query
        name: count
        schema:
          type: integer
        description: Number of tags to retrieve per first letter
      - in: query
        name: order_by
        schema:
          type: string
          enum:
          - created_at
          - name
          - updated_at
        description: Field to order tags by
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          description: ''
  /api/v1/tags/favorite/:
    get:
      operationId: api_v1_tags_favorite_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: per_page
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
  /api/v1/tags/first-letters/:
    get:
      operationId: api_v1_tags_first_letters_retrieve
      description: Retrieve a list of distinct first letters from available tags.
      tags:
      - api
      security:
      - cookieAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: ''
components:
  schemas:
    Audio:
      type: object
      properties:
        url:
          type: string
          readOnly: true
      required:
      - url
    Bookmark:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          title: Bookmark title
          maxLength: 100
        bookmarkings_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - bookmarkings_count
      - created_at
      - id
      - title
      - updated_at
    Bookmarking:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bookmark_id:
          type: integer
          writeOnly: true
        meme_id:
          type: integer
          writeOnly: true
        meme:
          allOf:
          - $ref: '#/components/schemas/Meme'
          readOnly: true
      required:
      - bookmark_id
      - id
      - meme
      - meme_id
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access:
          type: string
        refresh:
          type: string
        user:
          $ref: '#/components/schemas/UserDetails'
      required:
      - access
      - refresh
      - user
    KakaoAuthResponse:
      type: object
      properties:
        access:
          type: string
          description: JWT Access Token
        refresh:
          type: string
          description: JWT Refresh Token
      required:
      - access
      - refresh
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    Meme:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          title: Meme title
          maxLength: 100
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: Meme type
        description:
          type: string
          title: Meme description
        thumbnail_id:
          type: integer
          writeOnly: true
          nullable: true
        thumbnail:
          allOf:
          - $ref: '#/components/schemas/Thumbnail'
          readOnly: true
        audio_id:
          type: integer
          writeOnly: true
          nullable: true
        audio:
          allOf:
          - $ref: '#/components/schemas/Audio'
          readOnly: true
        video_id:
          type: integer
          writeOnly: true
          nullable: true
        video:
          allOf:
          - $ref: '#/components/schemas/Video'
          readOnly: true
        original_link:
          type: string
          nullable: true
          maxLength: 100
        tag_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - audio
      - created_at
      - description
      - id
      - tags
      - thumbnail
      - title
      - type
      - updated_at
      - video
    PaginatedBookmarkList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Bookmark'
    PaginatedBookmarkingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Bookmarking'
    PaginatedMemeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Meme'
    PaginatedTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedBookmark:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          title: Bookmark title
          maxLength: 100
        bookmarkings_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUserDetail:
      type: object
      description: UserSerializer를 확장하여 소셜 계정 정보를 포함
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
          readOnly: true
        social_account:
          type: array
          items:
            $ref: '#/components/schemas/SocialAccount'
          readOnly: true
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    SocialAccount:
      type: object
      description: 사용자가 연결한 소셜 계정을 반환하는 Serializer
      properties:
        provider:
          type: string
          readOnly: true
          title: 제공자
        uid:
          type: string
          readOnly: true
          title: 사용자 식별
      required:
      - provider
      - uid
    SocialLogin:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        category:
          $ref: '#/components/schemas/TagCategory'
        popularity:
          type: number
          format: double
          readOnly: true
        memes_count:
          type: integer
          readOnly: true
        bookmarkings_count:
          type: integer
          readOnly: true
      required:
      - bookmarkings_count
      - category
      - id
      - memes_count
      - name
      - popularity
    TagCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    Thumbnail:
      type: object
      properties:
        url:
          type: string
          readOnly: true
      required:
      - url
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    TypeEnum:
      enum:
      - Text
      - Image
      - Video
      - Audio
      type: string
      description: |-
        * `Text` - Text
        * `Image` - Image
        * `Video` - Video
        * `Audio` - Audio
    UserDetail:
      type: object
      description: UserSerializer를 확장하여 소셜 계정 정보를 포함
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
          readOnly: true
        social_account:
          type: array
          items:
            $ref: '#/components/schemas/SocialAccount'
          readOnly: true
      required:
      - email
      - pk
      - social_account
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
          readOnly: true
      required:
      - email
      - pk
    Video:
      type: object
      properties:
        url:
          type: string
          readOnly: true
      required:
      - url
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: dionysus-app-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
